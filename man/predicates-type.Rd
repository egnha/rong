% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predicates.R
\name{predicates-type}
\alias{predicates-type}
\title{Type predicates}
\arguments{
\item{x}{Object to test.}

\item{n}{Length.}

\item{encoding}{Encoding of a string or character vector. One of \code{UTF-8},
\code{latin1}, or \code{unknown}.}
}
\description{
Type predicates
}
\examples{
f <- function(x, y, z) NULL

## Require all arguments to be integer (vectors)
foo <- firmly(f, chk_integer())
foo(0L, 1:2, length(letters))
\dontrun{
foo(0L, c(1, 2), length(letters))}

## Require all arguments to be scalar integers
bar <- firmly(f, chk_integer(n = 1))
bar(0L, 1L, length(NA))
\dontrun{
bar(0L, 1L, lengths(letters))}

## Require x, y to be character (vectors), and z to be an length-1 list
baz <- firmly(f, chk_character(x, y), chk_list(n = 1, z))
baz(letters, "text", list(1))
\dontrun{
baz(0, "text", list(1, 2))}

}
\seealso{
\itemize{
\item \link[rlang:type-predicates]{rlang type predicates}, which underlie the
length-dependent predicates (except \code{chk_numerical()})
\item \link[=predicates-object]{Object predicates}, for verifying identities that are
not characterized by type, e.g., data frames, which have type \code{list}
}
}
\alias{chk_null}
\alias{chk_not_null}
\alias{chk_symbol}
\alias{chk_pairlist}
\alias{chk_closure}
\alias{chk_environment}
\alias{chk_language}
\alias{chk_atomic}
\alias{chk_vector}
\alias{chk_logical}
\alias{chk_boolean}
\alias{chk_numerical}
\alias{chk_number}
\alias{chk_integer}
\alias{chk_integerish}
\alias{chk_double}
\alias{chk_complex}
\alias{chk_character}
\alias{chk_string}
\alias{chk_list}
\alias{chk_raw}
\usage{
chk_null(x)

chk_not_null(x)

chk_symbol(x)

chk_pairlist(x)

chk_closure(x)

chk_environment(x)

chk_language(x)

chk_atomic(x, n = NULL)

chk_vector(x, n = NULL)

chk_logical(x, n = NULL)

chk_boolean(x)

chk_numerical(x, n = NULL)

chk_number(x)

chk_integer(x, n = NULL)

chk_integerish(x, n = NULL)

chk_double(x, n = NULL)

chk_complex(x, n = NULL)

chk_character(x, n = NULL, encoding = NULL)

chk_string(x)

chk_list(x, n = NULL)

chk_raw(x, n = NULL)
}
