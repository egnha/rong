% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/operators.R
\name{firmly}
\alias{firmly}
\alias{fasten}
\alias{loosely}
\alias{is_firm}
\title{Apply a function firmly}
\arguments{
\item{f}{Function.}

\item{\dots}{Input validation checks.}

\item{error_class}{Subclass of the error condition to be raised when an input
validation error occurs (character). If \code{NULL} (the default), the error
subclass is \code{inputValidationError}.}

\item{x}{Object to test.}
}
\description{
The main functions of valaddin apply or undo input validation checks to
functions:
\itemize{
\item \code{firmly()} transforms a function into a function with input validation
checks.
\item \code{loosely()} undoes the application of \code{firmly()}, by returning the
original function (without checks).
\item \code{fasten()} is a \href{https://en.wikipedia.org/wiki/Currying}{currying} of
\code{firmly()}: given a set of input validations, it returns a \emph{functional
operator} that applies the input validations.
\item \code{is_firm()} is a predicate function that checks whether an object is a
firmly applied function, i.e., a function created by \code{firmly().}
}
}
\examples{
\dontrun{

bc <- function(x, y) c(x, y, 1 - x - y)

## Ensure that inputs are numeric
bc1 <- firmly(bc, is.numeric)

bc1(.5, .2)
#> [1] 0.5 0.2 0.3

bc1(.5, ".2")
#> Error: bc1(x = 0.5, y = ".2")
#> FALSE: is.numeric(y)

## Use custom error messages
bc2 <- firmly(bc, "{{.}} is not numeric (type: {typeof(.)})" := is.numeric)

bc2(.5i, ".2")
#> Error: bc2(x = 0+0.5i, y = ".2")
#> 1) x is not numeric (type: complex)
#> 2) y is not numeric (type: character)

## firmly() and fasten() support tidyverse idioms
z <- 0
in_triangle <- vld(
  "{{.}} is not positive (value is {.})" :=
  {isTRUE(. > !! z)} ~ vld(x, y, 1 - x - y)
)
bc3 <- firmly(bc, is.numeric, !!! in_triangle)

bc3(.5, .2)
#> [1] 0.5 0.2 0.3

bc3(.5, .6)
#> Error: bc3(x = 0.5, y = 0.6)
#> 1 - x - y is not positive (value is -0.1)

## Use fasten() to highlight the core logic
bc_clean <- fasten(
  "{{.}} is not a number" := {is.numeric(.) && length(.) == 1},
  "{{.}} is not positive" :=
  {isTRUE(. > 0)} ~
    vld(x, "y is not in the upper-half plane" := y, 1 - x - y)
)(
  function(x, y) {
    c(x, y, 1 - x - y)
  }
)

## Recover the underlying function with loosely()
print(loosely(bc_clean))
#> function(x, y) {
#>     c(x, y, 1 - x - y)
#>   }
}

}
\seealso{
\link{components}, \link{validate}.
}
\usage{
firmly(f, ..., error_class = NULL)

fasten(..., error_class = NULL)

loosely(f)

is_firm(x)
}
