% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scope.R
\name{scope}
\alias{scope}
\alias{localize}
\alias{localize_comparison}
\alias{globalize}
\alias{predicate_function}
\alias{predicate_message}
\alias{predicate_message<-}
\title{Generate input validation checks}
\usage{
localize(p, msg = "")

localize_comparison(p, msg = "")

globalize(chkr)

predicate_function(x)

predicate_message(x)

predicate_message(x) <- value
}
\arguments{
\item{p}{Predicate function of one argument, for \code{localize()}, of two or more
arguments for \code{localize_comparison()}.}

\item{msg, value}{Error message (string). An empty string (the default)
implies that error messages are to be automatically generated.}

\item{chkr}{Function of class \code{local_predicate}, i.e., a function created by
\code{localize()}.}

\item{x}{Object of class \code{local_predicate} or \code{global_predicate}.}
}
\description{
Given a predicate (function), \code{localize()} returns a function that
\emph{generates} input validation checks (of local scope) for the predicate.
\code{globalize()} takes such a check generator and returns the underlying
predicate (wrapped in \code{\link[=vld]{vld()}}); when \code{globalize()} is unquoted in a call to
\code{\link[=firmly]{firmly()}} or \code{\link[=fasten]{fasten()}}, the corresponding predicate is applied as an input
validation check of global scope.
\cr\cr
The function \code{predicate_function()}, resp. \code{predicate_message()}, extracts
the associated predicate function, resp. error message.
}
\details{
Conceptually, \code{localize()} and \code{globalize()} represent inverse
operations. However, they are \emph{not} mutually invertible as functions,
because they are not composable.
}
\examples{
\dontrun{

## Make a positivity checker
chk_positive <- localize({isTRUE(. > 0)}, "{{.}} is not positive")
f <- firmly(function(x, y) "Pass", chk_positive(x, x - y))

f(2, 1)
#> [1] "Pass"

f(1, 2)
#> Error: f(x = 1, y = 2)
#> x - y is not positive

## Make a length checker, parameterized by .ref
chk_length <-
  localize_comparison(
    {length(.) == .ref}, "{{.}} not of length {{{.ref$value}}}"
  )
## .ref gets the value 2 (so check that the length is 2)
g <- firmly(function(x, y) "Pass", chk_length(2)(y))

g(1, 1:2)
#> [1] "Pass"

g(1:2, 1)
#> Error: g(x = 1)
#> y not of length 2
}

}
