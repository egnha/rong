% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check-scope.R
\name{check-scope}
\alias{check-scope}
\alias{lcl}
\alias{gbl}
\alias{pred_fn}
\alias{pred_msg}
\alias{pred_msg<-}
\title{Generate input validation checks}
\usage{
lcl(p)

gbl(x)

pred_fn(x)

pred_msg(x)

pred_msg(x) <- value
}
\arguments{
\item{p}{Predicate function, or a definition, whose LHS is an error message
(string) and whose RHS is a predicate function.}

\item{x}{Function of class \code{local_validation_checks}.}

\item{value}{Error message (string).}

\item{x}{Object of class \code{local_predicate} or \code{global_predicate}.}
}
\description{
Given a predicate (function), \code{lcl()} returns a function that \emph{generates}
input validation checks (of local scope) for the predicate. \code{gbl()} takes
such a check generator and returns the underlying error message-predicate
pair. When \code{gbl()} is unquoted in a call to \code{\link[=firmly]{firmly()}} or \code{\link[=fasten]{fasten()}}, the
corresponding predicate is applied as an input validation check of global
scope.
\cr\cr
The functions \code{pred_fn()} and \code{pred_msg()} extract the associated predicate
function and error message.
}
\details{
\code{gbl()} approximately inverts \code{lcl()}, by returning the underlying
message-predicate pair as a named list, rather than as a bare predicate
function or definition (formula).
}
\examples{
\dontrun{

## Make a positivity checker
chk_positive <- lcl("{{.}} is not positive" := {isTRUE(. > 0)})
f <- firmly(function(x, y) "Pass", chk_positive(x, x - y))

f(2, 1)
#> [1] "Pass"

f(1, 2)
#> Error: f(x = 1, y = 2)
#> x - y is not positive

## Make a parameterized length checker
chk_length <-
  lcl("{{.}} not of length {{.value$l}}" := function(., l) length(.) == l)

## l gets the value 2 (so check that the length is 2)
g <- firmly(function(x, y) "Pass", chk_length(l = 2, y))

g(1, 1:2)
#> [1] "Pass"

g(1:2, 1)
#> Error: g(x = 1:2, y = 1)
#> y not of length 2

## To apply a local predicate to all arguments, invoke gbl() on it
f <- firmly(function(x, y) "Pass", gbl(vld_double(n = 1)))

f(pi, 1)
#> [1] "Pass"

f(pi, runif(3))
#> Error: f(x = pi, y = runif(3))
#> y is not a double vector of length 1
}

}
