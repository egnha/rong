% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checker.R
\name{error_msg}
\alias{error_msg}
\alias{error_msg<-}
\alias{new_error_msg}
\title{Get or set a validation error message}
\usage{
error_msg(f)

error_msg(f, env = parent.frame()) <- value

new_error_msg(msg, env = parent.frame())
}
\arguments{
\item{f}{Predicate function.}

\item{env}{Environment that is in scope when a \code{\{\{...\}\}} substring of the
error message is interpolated.}

\item{value}{Error message (string or \link[rlang:quosure]{quosure} of a
string).}

\item{msg}{Error message (string).}
}
\value{
Quosure of a string.
}
\description{
Get or set a validation error message
}
\details{
An error message can only be set for predicate functions that are
\link[base:function]{closures}. To set an error message of a
\link[base:Primitive]{primitive} predicate, e.g., \code{is.array()}, transform it to
a closure with \code{\link[rlang:as_closure]{rlang::as_closure()}}.
}
\examples{
is_integer <- rlang::as_closure(is.integer)
error_msg(is_integer) <- "{{.}} not of integer type (type: {typeof(.)})"
error_msg(is_integer)

foo <- firmly(identity, is_integer)
foo(1:3)
\dontrun{
foo(runif(3))}

is_integer <- rlang::is_integer
msg <- local({
  len <- function(n) if (is.null(n)) "" else paste(" of length", n)
  new_error_msg("{{.}} is not an integer vector{{len(.value$n)}}")
})
error_msg(is_integer) <- msg

foo <- firmly(identity, is_integer(n = 3))
foo(1:3)
\dontrun{
foo(1:2)}

}
